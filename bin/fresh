#!/bin/bash -e

FRESH_RCFILE="${FRESH_RCFILE:-$HOME/.freshrc}"
FRESH_PATH="${FRESH_PATH:-$HOME/.fresh}"
FRESH_LOCAL="${FRESH_LOCAL:-$HOME/.dotfiles}"

fresh_install() {
  # create new output directory
  [ ! -e "$FRESH_PATH/build.new" ] || rm -rf "$FRESH_PATH/build.new"
  mkdir -p "$FRESH_PATH/build.new"
  echo "export PATH=\"~/bin:\$PATH\"" >> "$FRESH_PATH/build.new/shell.sh"

  # load the freshrc file
  if [ -e "$FRESH_RCFILE" ]; then
    source "$FRESH_RCFILE"
  fi

  # move output into place
  [ ! -e "$FRESH_PATH/build" ] || rm -rf "$FRESH_PATH/build"
  mv "$FRESH_PATH/build.new" "$FRESH_PATH/build"
}

# freshrc DSL
fresh() {
  parse_fresh_dsl_args "$@"

  if [ -n "$REPO_NAME" ]; then
    local REPO_DIR="$FRESH_PATH/source/$REPO_NAME"
    mkdir -p "$(dirname "$REPO_DIR")"
    if ! [ -e "$REPO_DIR" ]; then
      git clone "http://github.com/$REPO_NAME" "$REPO_DIR"
    fi
    local SOURCE_DIR="$REPO_DIR"
  else
    local SOURCE_DIR="$FRESH_LOCAL"
  fi

  if [[ $(find "$SOURCE_DIR" -path "$SOURCE_DIR/$FILE_NAME" | wc -l) -lt 1 ]]; then
    echo "Could not find \"$FILE_NAME\" source file. 2>&1" >&2
    exit 1
  fi

  case "${MODE:-shell}" in
    shell)
      find "$SOURCE_DIR" -path "$SOURCE_DIR/$FILE_NAME" -exec cat {} \+ >> "$FRESH_PATH/build.new/shell.sh"
      ;;
    file)
      find "$SOURCE_DIR" -path "$SOURCE_DIR/$FILE_NAME" | while read SOURCE_FILE
      do
        if [ -n "$MODE_ARG" ]; then
          DEST_NAME="$(basename "$MODE_ARG" | sed 's/^\.//')"
          SYMLINK_PATH="$MODE_ARG"
        else
          DEST_NAME="$(basename "$SOURCE_FILE" | sed 's/^\.//')"
          SYMLINK_PATH="~/.$DEST_NAME"
        fi
        cat "$SOURCE_FILE" >> "$FRESH_PATH/build.new/$DEST_NAME"
        SYMLINK_PATH="$(eval echo "$SYMLINK_PATH")"
        if ! [ -L "$SYMLINK_PATH" ]; then
          ln -s "$FRESH_PATH/build/$DEST_NAME" "$SYMLINK_PATH"
        fi
      done
      ;;
    bin)
      find "$SOURCE_DIR" -path "$SOURCE_DIR/$FILE_NAME" | while read SOURCE_FILE
      do
        if [ -n "$MODE_ARG" ]; then
          DEST_NAME="$(basename "$MODE_ARG")"
          SYMLINK_PATH="$MODE_ARG"
        else
          DEST_NAME="$(basename "$SOURCE_FILE")"
          SYMLINK_PATH="~/bin/$DEST_NAME"
        fi
        mkdir -p "$FRESH_PATH/build.new/bin" ~/bin
        cat "$SOURCE_FILE" >> "$FRESH_PATH/build.new/bin/$DEST_NAME"
        chmod +x "$FRESH_PATH/build.new/bin/$DEST_NAME"
        SYMLINK_PATH="$(eval echo "$SYMLINK_PATH")"
        if ! [ -L "$SYMLINK_PATH" ]; then
          ln -s "$FRESH_PATH/build/bin/$DEST_NAME" "$SYMLINK_PATH"
        fi
      done
      ;;
    *)
      echo "Unknown mode: $MODE" 2>&1
      exit 1
      ;;
  esac
}

function parse_fresh_dsl_args() {
  MODE=
  MODE_ARG=
  REPO_NAME=
  FILE_NAME=
  while [ $# -gt 0 ]
  do
    case "$1" in
      --file|--file=*|--bin|--bin=*)
        if [ -n "$MODE" ]; then
          echo "Cannot have more than one mode." 2>&1
          exit 1
        fi
        MODE="$(echo "$1" | sed -e 's/^--//' -e 's/=.*//')"
        MODE_ARG="$(echo "$1" | sed 's/^--[^=]*=*//')"
        ;;
      -*)
        echo "Unknown option: $1" >&2
        exit 1
        ;;
      *)
        if [ -n "$FILE_NAME" ]; then
          if [ -n "$REPO_NAME" ]; then
            echo "Expected 1 or 2 args." >&2
            exit 1
          fi
          REPO_NAME="$FILE_NAME"
          FILE_NAME="$1"
        else
          FILE_NAME="$1"
        fi
        ;;
    esac
    shift
  done
  if [ -z "$FILE_NAME" ]; then
    echo "Filename is required" >&2
    exit 1
  fi
}

if [ -z "$__FRESH_TEST_MODE" ]; then
  fresh_install
fi
